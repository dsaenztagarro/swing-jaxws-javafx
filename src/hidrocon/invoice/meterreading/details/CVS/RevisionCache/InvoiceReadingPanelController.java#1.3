/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hidrocon.invoice.meterreading.details;

import hidrocon.component.meter.MeterReadingPanelView;
import hidrocon.component.meterreadingregister.MeterReadingRegisterView;
import hidrocon.component.neighbour.NeighbourPanelView;
import hidrocon.core.database.building.entities.Building;
import hidrocon.core.database.neighbour.entities.Neighbour;
import hidrocon.core.database.neighbourmeter.entities.NeighbourMeterView;
import hidrocon.core.database.neighbourmeterreading.entities.NeighbourMeterReadingView;
import hidrocon.core.generic.pattern.mvc.HidroController;
import hidrocon.core.generic.pattern.observer.AppEvent;
import hidrocon.core.utils.ActionKey;
import hidrocon.core.utils.ObservableActionKey;
import hidrocon.ui.building.main.BuildingMainPanelController;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;

/**
 *
 * @author David SÃ¡enz Tagarro
 */
public class InvoiceReadingPanelController extends HidroController {
    
    private Building building;
    
    private InvoiceReadingPanelView view;
    private InvoiceReadingPanelModel model;
    
    public InvoiceReadingPanelController(InvoiceReadingPanelModel model, InvoiceReadingPanelView view) {
        this.view = view;
        this.model = model;
        
        view.addController(this);
    }

    /*
     * Process events from InvoiceReadingPanelView component
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        String action = e.getActionCommand();
          
        if (action.equals(ActionKey.NEIGHBOUR_DETAILS_EDIT)) {
            editNeighbour();
        }
        else if (action.equals(ActionKey.NEIGHBOUR_DETAILS_SAVE)) {
            saveNeighbour();
        }   
        else if (action.equals(ActionKey.METER_DELETE)) {
            deleteMeter();
        }        
        else if (action.equals(ActionKey.METER_SAVE)) {
            saveMeter();
        }        
        
    }

    @Override
    public void update(Observable o, Object arg) {
        AppEvent message = (AppEvent)arg;
        String action = message.getEventName();
        if (o instanceof BuildingMainPanelController) {
            if (action.equals(ObservableActionKey.FX_EVENT)) {
                System.out.println("FX Event!!!");
            }
            else if (action.equals(ObservableActionKey.FX_EVENT)) {
                System.out.println("FX Event!!!");
            }
        }
    }
    
    public void setBuilding(Building building) {
        this.building = building;
        
        //view.removeAllMeterReadingRegisters();
        InvoiceReadingPanelModel model = new InvoiceReadingPanelModel();
        List<Neighbour> neighbourList = model.getBuildingNeighbourList(building);
        for (Neighbour neighbour : neighbourList) {
            NeighbourPanelView neighbourPanelView = new NeighbourPanelView();
            neighbourPanelView.writeData(neighbour);
            
            List<NeighbourMeterReadingView> nmrList = model.getNeighbourMeterReadingList(neighbour);

            
            List<NeighbourMeterView> nmvList = model.getNeighbourMeterViewList(neighbour);
            List<MeterReadingPanelView> meterReadingPanelViewList = new ArrayList();;
            for (NeighbourMeterView nmv : nmvList) {
                MeterReadingPanelView meterReadingPanelView = new MeterReadingPanelView();
                meterReadingPanelView.buttonActionListeners(this);
                meterReadingPanelView.writeData(nmv);
                meterReadingPanelViewList.add(meterReadingPanelView);

                MeterReadingPanelView meterReadingPanelView2 = new MeterReadingPanelView();
                meterReadingPanelView2.buttonActionListeners(this);
                meterReadingPanelView2.writeData(nmv);
                meterReadingPanelViewList.add(meterReadingPanelView2);                
            }
            
            MeterReadingRegisterView register = new MeterReadingRegisterView();
            register.writeData(neighbourPanelView, meterReadingPanelViewList);
            //view.addMeterReadingRegister(register);
        }
        
    }
    
    private void deleteMeter() {
        
    }
    
    private void saveMeter() {
        
    }
    
    private void saveNeighbour() {
        /*
        Neighbour neighbour = new Neighbour();  
        boolean created = model.createNeighbour(neighbour);
        if (created) {
            view.addNeighbour(neighbour);
            model.showMessageNeighbourCreated();
        }*/
    }
    
    private void editNeighbour() {
        /*
        Neighbour neighbour = view.getNeighbourSelected();  
        boolean deleted = model.deleteNeighbour(neighbour);
        if (deleted) {
            view.removeNeighbour(neighbour);
            model.showMessageNeighbourDeleted();
        }*/
    }
        
    private void printNeighbour() {
        
    }

    public void mouseClicked(MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            //updateNeighbourMeterReading();
        }
    }

    public void keyPressed(KeyEvent evt) {
        int keyCode = evt.getKeyCode();
/*
        if (keyCode == KeyEvent.VK_ENTER) {
            evt.consume();
            updateNeighbour();
        }
        else if (keyCode == KeyEvent.VK_F4) {
            evt.consume();
            deleteNeighbour();
        }
        else if (keyCode == KeyEvent.VK_F6) {
            evt.consume();
            createNeighbour();
        }
        else if (keyCode == KeyEvent.VK_ESCAPE) {
            close();
        }*/
    }

    protected void initKeyBinding() {
                
        javax.swing.Action createAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                //createNeighbour();
            }
        };   
        
        javax.swing.Action updateAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                //updateNeighbour();
            }
        };        

        javax.swing.Action deleteAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                //deleteNeighbour();
            }
        };        
        
        /*JPanel mainPanel = view.getMainPanel();
        
        SwingUtilities.replaceUIActionMap(mainPanel, null);
        SwingUtilities.replaceUIInputMap(mainPanel, JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT, null);
        
        InputMap inputMap = mainPanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(KeyStroke.getKeyStroke("F10"),"editNeighbour_F10");        
        inputMap.put(KeyStroke.getKeyStroke("F11"),"saveNeighbour_F11");
        inputMap.put(KeyStroke.getKeyStroke("F12"),"closeNeighbour_F12");
        
        mainPanel.getActionMap().put("createNeighbour_F10",createAction);
        mainPanel.getActionMap().put("udateNeighbour_F11",updateAction);
        mainPanel.getActionMap().put("deleteNeighbour_F12",deleteAction);        */
    }
    
}
