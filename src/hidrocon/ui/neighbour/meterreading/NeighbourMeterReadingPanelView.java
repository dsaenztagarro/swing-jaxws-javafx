/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NeighbourMeterReadingPanelView.java
 *
 * Created on 25-dic-2011, 6:39:12
 */
package hidrocon.ui.neighbour.meterreading;

import hidrocon.HidroconView;
import hidrocon.core.database.neighbourmeterreading.entities.NeighbourMeterReadingView;
import hidrocon.custom.button.section.HidroSaveButton;
import hidrocon.custom.button.toolbar.HidroEditButton;
import hidrocon.custom.legend.HidroRouteMapLegend;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author David SÃ¡enz Tagarro
 */
public class NeighbourMeterReadingPanelView extends javax.swing.JPanel {

    HidroEditButton editButton;
    HidroSaveButton saveButton;
    
    /** Creates new form NeighbourMeterReadingPanelView */
    public NeighbourMeterReadingPanelView() {
        initComponents();
        initTopPanel();
        customizeComponents();
    }

    protected void customizeComponents() {
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
        //Sections:
        //Details 2 panel:
        neighbourMeterReadingSection.setImageIcon(new HidroRouteMapLegend());
    }
    
	protected void initTopPanel() {
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
		topPanel.setTitle("  " + resourceMap.getString("neighbour.details.toppanel.title"));
		
		/*editButton = new HidroEditButton();
		saveButton = new HidroSaveButton();
		exitButton = new HidroExitButton();
        		
		editButton.setToolTipText(resourceMap.getString("neighbourmeter.details.toolbar.editbutton.tooltip"));
		saveButton.setToolTipText(resourceMap.getString("neighbourmeter.details.toolbar.savebutton.tooltip"));
        
		topPanel.addButton(editButton);
		topPanel.addButton(saveButton);
        topPanel.addButton(exitButton); */
        
        //arrowRightButton.setVisible(true);
	}
    
    public void writeData(List neighbourMeterReadingList) {
        this.neighbourMeterReadingList.clear();
        this.neighbourMeterReadingList.addAll(neighbourMeterReadingList);
    }    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        neighbourMeterReadingList = org.jdesktop.observablecollections.ObservableCollections.observableList(new ArrayList<NeighbourMeterReadingView>());
        topPanel = new hidrocon.custom.panel.HidroTopPanel();
        mainPanel = new hidrocon.custom.panel.HidroPanel();
        left2Filler = new javax.swing.Box.Filler(new java.awt.Dimension(25, 25), new java.awt.Dimension(25, 25), new java.awt.Dimension(25, 32767));
        right2Filler = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        neighbourMeterReadingSection = new hidrocon.custom.panel.HidroSectionPanel();
        neighbourMeterReadingPanel = new hidrocon.custom.panel.HidroPanel();
        neighbourMeterReadingScrollPane = new javax.swing.JScrollPane();
        neighbourMeterReadingTable = new hidrocon.custom.table.HidroTable();
        bottom2Filler = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        topPanel.setMaximumSize(new java.awt.Dimension(580, 35));
        topPanel.setName("topPanel"); // NOI18N
        add(topPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.setMaximumSize(new java.awt.Dimension(560, 575));
        mainPanel.setMinimumSize(new java.awt.Dimension(560, 575));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(560, 575));
        mainPanel.setRequestFocusEnabled(false);
        mainPanel.setLayout(new java.awt.GridBagLayout());

        left2Filler.setName("left2Filler"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        mainPanel.add(left2Filler, gridBagConstraints);

        right2Filler.setName("right2Filler"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        mainPanel.add(right2Filler, gridBagConstraints);

        neighbourMeterReadingSection.setName("neighbourMeterReadingSection"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mainPanel.add(neighbourMeterReadingSection, gridBagConstraints);

        neighbourMeterReadingPanel.setMinimumSize(new java.awt.Dimension(600, 120));
        neighbourMeterReadingPanel.setName("neighbourMeterReadingPanel"); // NOI18N
        neighbourMeterReadingPanel.setLayout(new java.awt.GridBagLayout());

        neighbourMeterReadingScrollPane.setName("neighbourMeterReadingScrollPane"); // NOI18N

        neighbourMeterReadingTable.setName("neighbourMeterReadingTable"); // NOI18N

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, neighbourMeterReadingList, neighbourMeterReadingTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${meterReadingDate}"));
        columnBinding.setColumnName("Meter Reading Date");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${meterTypeId}"));
        columnBinding.setColumnName("Meter Type Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${readValue}"));
        columnBinding.setColumnName("Read Value");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${registeredValue}"));
        columnBinding.setColumnName("Registered Value");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${m3}"));
        columnBinding.setColumnName("M3");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${statusId}"));
        columnBinding.setColumnName("Status Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        neighbourMeterReadingScrollPane.setViewportView(neighbourMeterReadingTable);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(NeighbourMeterReadingPanelView.class);
        neighbourMeterReadingTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("neighbourMeterReadingTable.columnModel.title1")); // NOI18N
        neighbourMeterReadingTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("neighbourMeterReadingTable.columnModel.title0")); // NOI18N
        neighbourMeterReadingTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("neighbourMeterReadingTable.columnModel.title2")); // NOI18N
        neighbourMeterReadingTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("neighbourMeterReadingTable.columnModel.title3")); // NOI18N
        neighbourMeterReadingTable.getColumnModel().getColumn(4).setResizable(false);
        neighbourMeterReadingTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("neighbourMeterReadingTable.columnModel.title4")); // NOI18N
        neighbourMeterReadingTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("neighbourMeterReadingTable.columnModel.title5")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        neighbourMeterReadingPanel.add(neighbourMeterReadingScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        mainPanel.add(neighbourMeterReadingPanel, gridBagConstraints);

        bottom2Filler.setName("bottom2Filler"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(bottom2Filler, gridBagConstraints);

        add(mainPanel, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler bottom2Filler;
    private javax.swing.Box.Filler left2Filler;
    private hidrocon.custom.panel.HidroPanel mainPanel;
    private java.util.List<NeighbourMeterReadingView> neighbourMeterReadingList;
    private hidrocon.custom.panel.HidroPanel neighbourMeterReadingPanel;
    private javax.swing.JScrollPane neighbourMeterReadingScrollPane;
    private hidrocon.custom.panel.HidroSectionPanel neighbourMeterReadingSection;
    private hidrocon.custom.table.HidroTable neighbourMeterReadingTable;
    private javax.swing.Box.Filler right2Filler;
    private hidrocon.custom.panel.HidroTopPanel topPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

	protected PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    @Override
	public void addPropertyChangeListener(PropertyChangeListener l) {
		propertyChangeSupport.addPropertyChangeListener(l);
	}

    @Override
	public void removePropertyChangeListener(PropertyChangeListener l) {
		propertyChangeSupport.removePropertyChangeListener(l);
	}    
    
    /**
     * @return the neighbourMeterReadingList
     */
    public java.util.List<NeighbourMeterReadingView> getNeighbourMeterReadingList() {
        return neighbourMeterReadingList;
    }

    /**
     * @param neighbourMeterReadingList the neighbourMeterReadingList to set
     */
    public void setNeighbourMeterReadingList(java.util.List<NeighbourMeterReadingView> neighbourMeterReadingList) {
        this.neighbourMeterReadingList = neighbourMeterReadingList;
        
        java.util.List<NeighbourMeterReadingView> oldRecord = this.neighbourMeterReadingList;
        this.neighbourMeterReadingList = neighbourMeterReadingList;
        propertyChangeSupport.firePropertyChange("neighbourMeterReadingList", oldRecord, neighbourMeterReadingList);          
        
    }
    
    public void buttonActionListeners(ActionListener al) {
        /*editButton.setActionCommand(HidroAction.NEIGHBOUR_DETAILS_EDIT);
		editButton.addActionListener(al);        
        saveButton.setActionCommand(HidroAction.NEIGHBOUR_DETAILS_SAVE);
		saveButton.addActionListener(al);*/           
    }
    
    public JPanel getMainPanel() {
        return mainPanel;
    }

}
