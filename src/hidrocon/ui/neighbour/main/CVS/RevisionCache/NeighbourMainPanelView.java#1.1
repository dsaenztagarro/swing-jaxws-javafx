/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NeighbourMainPanelView.java
 *
 * Created on 05-dic-2011, 20:58:56
 */
package hidrocon.ui.neighbour.main;

import hidrocon.HidroconView;
import hidrocon.core.database.neighbour.entities.Neighbour;
import hidrocon.core.utils.ActionKey;
import hidrocon.custom.button.toolbar.HidroDeleteButton;
import hidrocon.custom.button.toolbar.HidroExitButton;
import hidrocon.custom.button.toolbar.HidroInfoButton;
import hidrocon.custom.button.toolbar.HidroNewButton;
import hidrocon.custom.panel.HidroMainPanel;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author David SÃ¡enz Tagarro
 */
public class NeighbourMainPanelView extends HidroMainPanel {

	private final int COLUMN_NEIGHBOUR_NUMBER = 0;
	private final int COLUMN_NEIGHBOUR_NAME = 1;
    
    HidroNewButton newButton;
    HidroInfoButton infoButton;
    HidroDeleteButton deleteButton;
    HidroExitButton exitButton;
    
    /** Creates new form NeighbourMainPanelView */
    public NeighbourMainPanelView() {
        initComponents();
        initTopPanel();
        initFilters();
    }
    
	private void initTopPanel() {
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
		topPanel.setTitle("  " + resourceMap.getString("neighbour.details.toppanel.title"));
		
		newButton = new HidroNewButton();
		infoButton = new HidroInfoButton();
		deleteButton = new HidroDeleteButton();
		exitButton = new HidroExitButton();
		
		newButton.setToolTipText(resourceMap.getString("neighbour.toolbar.newbutton.tooltip"));
		infoButton.setToolTipText(resourceMap.getString("neighbour.toolbar.infobutton.tooltip"));
		deleteButton.setToolTipText(resourceMap.getString("neighbour.toolbar.deletebutton.tooltip"));
		exitButton.setToolTipText(resourceMap.getString("neighbour.details.toolbar.exitbutton.tooltip"));
        
		topPanel.addButton(newButton);
		topPanel.addButton(infoButton);
        topPanel.addButton(deleteButton);
        topPanel.addButton(exitButton);
	}    

	/*
	 * Search filter methods
	 */

	private void initFilters() {
		initNeighbourNameFilter();
		initNeighbourNumberFilter();
	}

	private void initNeighbourNameFilter() {
		neighbourNameField.getDocument().addDocumentListener(new DocumentListener() {
			public void changedUpdate(DocumentEvent e) {
				filterByNeighbourName();
			}
			public void insertUpdate(DocumentEvent e) {
				filterByNeighbourName();
			}
			public void removeUpdate(DocumentEvent e) {
				filterByNeighbourName();
			}
		});
	}
	
	private void initNeighbourNumberFilter() {
		neighbourNumberField.getDocument().addDocumentListener(
            new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    filterByNeighbourNumber();
                }
                public void insertUpdate(DocumentEvent e) {
                    filterByNeighbourNumber();
                }
                public void removeUpdate(DocumentEvent e) {
                    filterByNeighbourNumber();
                }
            });
	}

    private void filterByNeighbourName() {
		String value = neighbourNameField.getText();
		if (value!=null && !value.equals("")) {
			clearOtherFilters(COLUMN_NEIGHBOUR_NAME);
			neighbourTable.newFilter(value, COLUMN_NEIGHBOUR_NAME);
		} else {
			neighbourTable.clearFilter();
		}
    }

    private void filterByNeighbourNumber() {		
		String value = neighbourNumberField.getText();
		if (value!=null && !value.equals("")) {
			clearOtherFilters(COLUMN_NEIGHBOUR_NUMBER);
			neighbourTable.newNumberFilter(new Integer(value), COLUMN_NEIGHBOUR_NUMBER);
		} else {
			neighbourTable.clearFilter();
		}
    }

	private void clearOtherFilters(int selectedColumn) {
		if (selectedColumn == COLUMN_NEIGHBOUR_NUMBER) {
			neighbourNameField.setText("");
		}
		else if (selectedColumn == COLUMN_NEIGHBOUR_NAME) {
			neighbourNumberField.setText("");
		}
	}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        neighbourList = org.jdesktop.observablecollections.ObservableCollections.observableList(new ArrayList<Neighbour>());
        topPanel = new hidrocon.custom.panel.HidroTopPanel();
        mainPanel = new hidrocon.custom.panel.HidroMainPanel();
        neighbourScrollPane = new javax.swing.JScrollPane();
        neighbourTable = new hidrocon.custom.table.HidroTable();
        leftFiller = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(20, 32767));
        bottomFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25), new java.awt.Dimension(32767, 25));
        rightFiller = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        maintopPanel = new hidrocon.custom.panel.HidroPanel();
        neighbourNameLabel = new hidrocon.custom.label.HidroLabel();
        neighbourNameField = new hidrocon.custom.field.HidroTextField();
        neighbourNumberField = new hidrocon.custom.field.HidroTextField();
        neighbourNumberLabel = new hidrocon.custom.label.HidroLabel();
        neighbourNameFilterLegend = new hidrocon.custom.legend.FilterLegend();
        neighbourNumberFilterLegend = new hidrocon.custom.legend.FilterLegend();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        topPanel.setName("topPanel"); // NOI18N
        add(topPanel, java.awt.BorderLayout.NORTH);

        mainPanel.setMinimumSize(new java.awt.Dimension(500, 575));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(500, 575));
        mainPanel.setLayout(new java.awt.BorderLayout());

        neighbourScrollPane.setName("neighbourScrollPane"); // NOI18N

        neighbourTable.setName("neighbourTable"); // NOI18N

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, neighbourList, neighbourTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${neighbourNumber}"));
        columnBinding.setColumnName("Neighbour Number");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${neighbourName}"));
        columnBinding.setColumnName("Neighbour Name");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${floor}"));
        columnBinding.setColumnName("Floor");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        neighbourScrollPane.setViewportView(neighbourTable);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(NeighbourMainPanelView.class);
        neighbourTable.getColumnModel().getColumn(0).setMinWidth(80);
        neighbourTable.getColumnModel().getColumn(0).setMaxWidth(80);
        neighbourTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("neighbourTable.columnModel.title0")); // NOI18N
        neighbourTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("neighbourTable.columnModel.title1")); // NOI18N
        neighbourTable.getColumnModel().getColumn(2).setMinWidth(80);
        neighbourTable.getColumnModel().getColumn(2).setMaxWidth(80);
        neighbourTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("neighbourTable.columnModel.title2")); // NOI18N

        mainPanel.add(neighbourScrollPane, java.awt.BorderLayout.CENTER);

        leftFiller.setName("leftFiller"); // NOI18N
        mainPanel.add(leftFiller, java.awt.BorderLayout.LINE_START);

        bottomFiller.setName("bottomFiller"); // NOI18N
        mainPanel.add(bottomFiller, java.awt.BorderLayout.PAGE_END);

        rightFiller.setName("rightFiller"); // NOI18N
        mainPanel.add(rightFiller, java.awt.BorderLayout.LINE_END);

        maintopPanel.setName("maintopPanel"); // NOI18N
        maintopPanel.setPreferredSize(new java.awt.Dimension(712, 45));

        neighbourNameLabel.setText(resourceMap.getString("neighbourNameLabel.text")); // NOI18N
        neighbourNameLabel.setName("neighbourNameLabel"); // NOI18N

        neighbourNameField.setEditable(true);
        neighbourNameField.setName("neighbourNameField"); // NOI18N

        neighbourNumberField.setEditable(true);
        neighbourNumberField.setName("neighbourNumberField"); // NOI18N

        neighbourNumberLabel.setText(resourceMap.getString("neighbourNumberLabel.text")); // NOI18N
        neighbourNumberLabel.setName("neighbourNumberLabel"); // NOI18N

        neighbourNameFilterLegend.setName("neighbourNameFilterLegend"); // NOI18N

        neighbourNumberFilterLegend.setName("neighbourNumberFilterLegend"); // NOI18N

        javax.swing.GroupLayout maintopPanelLayout = new javax.swing.GroupLayout(maintopPanel);
        maintopPanel.setLayout(maintopPanelLayout);
        maintopPanelLayout.setHorizontalGroup(
            maintopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maintopPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(neighbourNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(neighbourNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(neighbourNameFilterLegend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(neighbourNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(neighbourNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(neighbourNumberFilterLegend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        maintopPanelLayout.setVerticalGroup(
            maintopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(maintopPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(maintopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neighbourNumberFilterLegend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neighbourNameFilterLegend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(maintopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(neighbourNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(neighbourNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(neighbourNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(neighbourNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(maintopPanel, java.awt.BorderLayout.PAGE_START);

        add(mainPanel, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler bottomFiller;
    private javax.swing.Box.Filler leftFiller;
    private hidrocon.custom.panel.HidroMainPanel mainPanel;
    private hidrocon.custom.panel.HidroPanel maintopPanel;
    private java.util.List<Neighbour> neighbourList;
    private hidrocon.custom.field.HidroTextField neighbourNameField;
    private hidrocon.custom.legend.FilterLegend neighbourNameFilterLegend;
    private hidrocon.custom.label.HidroLabel neighbourNameLabel;
    private hidrocon.custom.field.HidroTextField neighbourNumberField;
    private hidrocon.custom.legend.FilterLegend neighbourNumberFilterLegend;
    private hidrocon.custom.label.HidroLabel neighbourNumberLabel;
    private javax.swing.JScrollPane neighbourScrollPane;
    private hidrocon.custom.table.HidroTable neighbourTable;
    private javax.swing.Box.Filler rightFiller;
    private hidrocon.custom.panel.HidroTopPanel topPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void buttonActionListeners(ActionListener al) {
        newButton.setActionCommand(ActionKey.NEIGHBOUR_CREATE);
		newButton.addActionListener(al);
        infoButton.setActionCommand(ActionKey.NEIGHBOUR_UPDATE);
        infoButton.addActionListener(al);        
		deleteButton.setActionCommand(ActionKey.NEIGHBOUR_DELETE);
        deleteButton.addActionListener(al);
		exitButton.setActionCommand(ActionKey.NEIGHBOUR_CLOSE);
        exitButton.addActionListener(al);        
    }
    
    public void tableKeyListeners(KeyListener kl) {
        neighbourTable.addKeyListener(kl);
    }
    
    public void tableMouseListeners(MouseListener ml) {
        neighbourTable.addMouseListener(ml);
    }    

    public Neighbour getNeighbourSelected() {
		if (neighbourTable.getSelectedRow() > -1) {
			return neighbourList.get(neighbourTable.convertRowIndexToModel(neighbourTable.getSelectedRow()));
        }
        return null;
    }
    
	public void refreshNeighbourList() {
		java.util.List auxList = new java.util.ArrayList();
		auxList.addAll(neighbourList);
		neighbourList.clear();
		neighbourList.addAll(auxList);
    }    
    
    public void addNeighbour(Neighbour neighbour) {
        neighbourList.add(neighbour);
    }
    
    public void removeNeighbour(Neighbour neighbour) {
        neighbourList.remove(neighbour);
    }
    
    public void setNeighbourList(List list) {
        neighbourList.clear();
        if (list!=null) {
            neighbourList.addAll(list);
        }
    }
    
    public JPanel getMainPanel() {
        return mainPanel;
    }
}
