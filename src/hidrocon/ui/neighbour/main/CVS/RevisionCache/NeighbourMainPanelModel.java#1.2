/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hidrocon.ui.neighbour.main;

import hidrocon.HidroconApp;
import hidrocon.HidroconView;
import hidrocon.core.database.building.entities.Building;
import hidrocon.core.database.neighbour.entities.Neighbour;
import hidrocon.core.database.neighbour.manager.NeighbourManager;
import hidrocon.core.generic.pattern.mvc.HidroModel;
import hidrocon.core.generic.pattern.observer.AppEvent;
import hidrocon.core.utils.ObservableActionKey;
import hidrocon.custom.Constant;
import hidrocon.custom.dialog.HidroDialog;
import hidrocon.custom.dialog.interfaces.IEntityManager;
import hidrocon.custom.utils.HidroDialogFactory;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author David Sáenz Tagarro
 */
public class NeighbourMainPanelModel extends HidroModel {
    
    private class SearchNeighbourWorker extends SwingWorker<List,Void> {

        Building building = null;

        public SearchNeighbourWorker(Building building) {
            this.building = building;
        }
        
        @Override
        protected List doInBackground() throws Exception {
            List list = null;
            if (building!=null) {
                NeighbourManager nm = new NeighbourManager();
                list = nm.getNeighbourList(building.getId());
            }
            return list;
        }
        
        @Override
        public void done() {
            AppEvent message = null;
            try {
                message = new AppEvent(ObservableActionKey.SEARCH_INFO,get());
            } catch (InterruptedException ex) {
                Logger.getLogger(NeighbourMainPanelModel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(NeighbourMainPanelModel.class.getName()).log(Level.SEVERE, null, ex);
            }
            notifyController(message);
        }
    }
    
    //public List getNeighbourList(Building building) {
    public void searchNeighbour(Building building) {
        SearchNeighbourWorker worker = new SearchNeighbourWorker(building);
        worker.execute();
        /*List list = null;
        if (building!=null) {
            NeighbourManager nm = new NeighbourManager();
            list = nm.getNeighbourList(building.getId());
        }
        return list;*/
    }
    
	public boolean createNeighbour(Neighbour neighbour) {
        HidroDialogFactory hdf = HidroDialogFactory.getInstance();
        HidroDialog dialog = hdf.getDialog(HidroDialogFactory.NEIGHBOUR_DETAILS);
        IEntityManager emDialog = (IEntityManager)dialog;
        emDialog.setEntity(neighbour);
        emDialog.setMode(Constant.ENTITY_MANAGEMENT_MODE_CREATION);        
        HidroconApp.getApplication().show(dialog);

		if (emDialog.isEntityUpdated()) {
			NeighbourManager neighboursManager = new NeighbourManager();
			neighboursManager.createNeighbour(neighbour);
            return true;
		}
        return false;
	}   
    
    public void showMessageNeighbourCreated() {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
        Object[] options = { resourceMap.getString("message.dialog.continue") };
        JOptionPane.showOptionDialog(null, resourceMap.getString("neighbour.message.dialog.create"), resourceMap.getString("message.information"),
            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,
            null, options, options[0]);            
    }
    
	public boolean updateNeighbour(Neighbour neighbour) {
		if (neighbour != null) {
            HidroDialogFactory hdf = HidroDialogFactory.getInstance();
            HidroDialog dialog = hdf.getDialog(HidroDialogFactory.NEIGHBOUR_DETAILS);
            dialog.setResizable(true);
            IEntityManager emDialog = (IEntityManager)dialog;
			emDialog.setEntity(neighbour);
            emDialog.setMode(Constant.ENTITY_MANAGEMENT_MODE_VIEW);
			HidroconApp.getApplication().show(dialog);
            
			if (emDialog.isEntityUpdated()) {
				NeighbourManager buildingManager = new NeighbourManager();
				buildingManager.updateNeighbour(neighbour);
                return true;
			}
		}
        return false;
	}

    public void showMessageNeighbourUpdated() {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
        Object[] options = { resourceMap.getString("message.dialog.continue") };
        JOptionPane.showOptionDialog(null, resourceMap.getString("neighbour.message.dialog.edit"), resourceMap.getString("message.information"),
            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,
            null, options, options[0]); 
    }
    
	public boolean deleteNeighbour(Neighbour neighbour) {
		if (neighbour != null) {
			org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
			Object[] options = { resourceMap.getString("message.dialog.yes"), resourceMap.getString("message.dialog.no") };
			int optionSelected = JOptionPane.showOptionDialog(null, resourceMap.getString("neighbour.message.dialog.delete.question"), "Atención",
				JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
				null, options, options[0]);

			if (optionSelected == 0) {
				NeighbourManager neighbourManager = new NeighbourManager();
				neighbourManager.deleteNeighbour(neighbour);
                return true;
			}
		}
        return false;
	}

    public void showMessageNeighbourDeleted() {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
        Object[] options = { resourceMap.getString("message.dialog.continue") };
        JOptionPane.showOptionDialog(null, resourceMap.getString("neighbour.message.dialog.delete"), resourceMap.getString("message.information"),
            JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,
            null, options, options[0]); 
    }
    
}
