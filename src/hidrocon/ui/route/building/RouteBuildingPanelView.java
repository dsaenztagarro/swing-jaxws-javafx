/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RouteBuildingDateDetailsView.java
 *
 * Created on 25-nov-2011, 22:16:43
 */
package hidrocon.ui.route.building;

import hidrocon.HidroconView;
import hidrocon.core.database.routebuilding.entities.RouteBuildingView;
import hidrocon.core.database.routedate.entities.RouteDate;
import hidrocon.core.utils.ActionKey;
import hidrocon.custom.Constant;
import hidrocon.custom.button.section.HidroDeleteButton;
import hidrocon.custom.button.toolbar.HidroArrowDownButton;
import hidrocon.custom.button.toolbar.HidroArrowUpButton;
import hidrocon.custom.button.toolbar.HidroEditButton;
import hidrocon.custom.button.toolbar.HidroNewButton;
import hidrocon.custom.button.toolbar.HidroSaveButton;
import hidrocon.custom.panel.HidroMainPanel;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 *
 * @author David SÃ¡enz Tagarro
 */
public class RouteBuildingPanelView extends HidroMainPanel {
    
    private RouteDate routeDate;
    
    private int mode;
    
    HidroArrowUpButton moveUpRouteBuildingButton;
    HidroArrowDownButton moveDownRouteBuildingButton;
    HidroEditButton editRouteBuildingButton;
    HidroSaveButton saveRouteBuildingButton;
	HidroNewButton newRouteBuildingButton;
	HidroDeleteButton deleteRouteBuildingButton;
    
    /** Creates new form RouteBuildingDateDetailsView */
    public RouteBuildingPanelView() {
        initComponents();
        initTopPanel();
        customizeComponents();
    }

	private void initTopPanel() {
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
		topPanel.setTitle("  " + resourceMap.getString("routebuilding.toppanel.title"));

        moveUpRouteBuildingButton = new HidroArrowUpButton();
        moveDownRouteBuildingButton = new HidroArrowDownButton();
        editRouteBuildingButton = new HidroEditButton();
        saveRouteBuildingButton = new HidroSaveButton();
		newRouteBuildingButton = new HidroNewButton();
		deleteRouteBuildingButton = new HidroDeleteButton();
		
        moveUpRouteBuildingButton.setToolTipText(resourceMap.getString("routebuilding.toolbar.arrowUpbutton.tooltip"));
        moveDownRouteBuildingButton.setToolTipText(resourceMap.getString("routebuilding.toolbar.arrowDownbutton.tooltip"));
        editRouteBuildingButton.setToolTipText(resourceMap.getString("routebuilding.toolbar.editbutton.tooltip"));
        saveRouteBuildingButton.setToolTipText(resourceMap.getString("routebuilding.toolbar.savebutton.tooltip"));
        newRouteBuildingButton.setToolTipText(resourceMap.getString("routebuilding.toolbar.newbutton.tooltip"));
		deleteRouteBuildingButton.setToolTipText(resourceMap.getString("routebuilding.toolbar.deletebutton.tooltip"));
		
        topPanel.addButton(moveUpRouteBuildingButton);
        topPanel.addButton(moveDownRouteBuildingButton);
        topPanel.addButton(editRouteBuildingButton);
		topPanel.addButton(saveRouteBuildingButton);
        topPanel.addButton(newRouteBuildingButton);
		topPanel.addButton(deleteRouteBuildingButton);
	}

    private void customizeComponents() {
        routeBuildingTable.setRowSorter(null);
        routeBuildingTable.setAutoCreateRowSorter(false);
    }
    
    public void addRouteBuilding(RouteBuildingView routeBuilding) {
        routeBuildingList.add(routeBuilding);
    }
    
    public int getRouteBuildingSelectedIndex() {
        if (routeBuildingTable.getSelectedRow()>-1) {
            return routeBuildingTable.convertRowIndexToModel(routeBuildingTable.getSelectedRow());
        }
        return -1;
    }
    
    public void selectRouteBuildingTableRow(int index) {
        routeBuildingTable.setRowSelectionInterval(index, index);
    }
    
    public RouteBuildingView getRouteBuildingSelected() {
		if (routeBuildingTable.getSelectedRow() > -1) {
			return routeBuildingList.get(routeBuildingTable.convertRowIndexToModel(routeBuildingTable.getSelectedRow()));
        }
        return null;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        routeBuildingList = org.jdesktop.observablecollections.ObservableCollections.observableList(new ArrayList());
        topPanel = new hidrocon.custom.panel.HidroTopPanel();
        mainPanel = new hidrocon.custom.panel.HidroMainPanel();
        routeBuildingScrollPane = new javax.swing.JScrollPane();
        routeBuildingTable = new hidrocon.custom.table.HidroTable();
        leftFiller = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        rightFiller = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        bottomFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25), new java.awt.Dimension(32767, 25));
        topFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25), new java.awt.Dimension(32767, 25));

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(650, 350));
        setLayout(new java.awt.BorderLayout());

        topPanel.setName("topPanel"); // NOI18N
        add(topPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.GridBagLayout());

        routeBuildingScrollPane.setName("routeBuildingScrollPane"); // NOI18N

        routeBuildingTable.setName("routeBuildingTable"); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${routeBuildingList}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, routeBuildingTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${orderId}"));
        columnBinding.setColumnName("Order Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingCode}"));
        columnBinding.setColumnName("Building Code");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingMeterCounter}"));
        columnBinding.setColumnName("Building Meter Counter");
        columnBinding.setColumnClass(java.math.BigInteger.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingAddress}"));
        columnBinding.setColumnName("Building Address");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingNumber}"));
        columnBinding.setColumnName("Building Number");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        routeBuildingScrollPane.setViewportView(routeBuildingTable);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(RouteBuildingPanelView.class);
        routeBuildingTable.getColumnModel().getColumn(0).setMinWidth(80);
        routeBuildingTable.getColumnModel().getColumn(0).setMaxWidth(80);
        routeBuildingTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("routeBuildingTable.columnModel.title0")); // NOI18N
        routeBuildingTable.getColumnModel().getColumn(1).setMinWidth(100);
        routeBuildingTable.getColumnModel().getColumn(1).setMaxWidth(100);
        routeBuildingTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("routeBuildingTable.columnModel.title1")); // NOI18N
        routeBuildingTable.getColumnModel().getColumn(2).setMinWidth(80);
        routeBuildingTable.getColumnModel().getColumn(2).setMaxWidth(80);
        routeBuildingTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title4")); // NOI18N
        routeBuildingTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title2")); // NOI18N
        routeBuildingTable.getColumnModel().getColumn(4).setMinWidth(80);
        routeBuildingTable.getColumnModel().getColumn(4).setMaxWidth(80);
        routeBuildingTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title3")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(routeBuildingScrollPane, gridBagConstraints);

        leftFiller.setName("leftFiller"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mainPanel.add(leftFiller, gridBagConstraints);

        rightFiller.setName("rightFiller"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        mainPanel.add(rightFiller, gridBagConstraints);

        bottomFiller.setName("bottomFiller"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        mainPanel.add(bottomFiller, gridBagConstraints);

        topFiller.setName("topFiller"); // NOI18N
        mainPanel.add(topFiller, new java.awt.GridBagConstraints());

        add(mainPanel, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler bottomFiller;
    private javax.swing.Box.Filler leftFiller;
    private hidrocon.custom.panel.HidroMainPanel mainPanel;
    private javax.swing.Box.Filler rightFiller;
    private java.util.List<hidrocon.core.database.routebuilding.entities.RouteBuildingView> routeBuildingList;
    private javax.swing.JScrollPane routeBuildingScrollPane;
    private hidrocon.custom.table.HidroTable routeBuildingTable;
    private javax.swing.Box.Filler topFiller;
    private hidrocon.custom.panel.HidroTopPanel topPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

	protected PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    @Override
	public void addPropertyChangeListener(PropertyChangeListener l) {
		propertyChangeSupport.addPropertyChangeListener(l);
	}

    @Override
	public void removePropertyChangeListener(PropertyChangeListener l) {
		propertyChangeSupport.removePropertyChangeListener(l);
	}    
    
    /**
     * @return the routebuildingsList
     */
    public java.util.List<RouteBuildingView> getRouteBuildingList() {
        return routeBuildingList;
    }

    /**
     * @param routebuildingsList the routebuildingsList to set
     */
    public void setRouteBuildingList(java.util.List<RouteBuildingView> routeBuildingList) {
        java.util.List<RouteBuildingView> oldRecord = this.routeBuildingList;
        this.routeBuildingList = routeBuildingList;
        propertyChangeSupport.firePropertyChange("routeBuildingList", oldRecord, routeBuildingList);        
    }
    
    public void setMode(int mode) {
        if (mode == Constant.VIEW_MODE_READONLY) {
            moveUpRouteBuildingButton.setVisible(false);
            moveDownRouteBuildingButton.setVisible(false);
            saveRouteBuildingButton.setVisible(false);
            editRouteBuildingButton.setVisible(true);
        }
        else if (mode == Constant.VIEW_MODE_UPDATE) {
            moveUpRouteBuildingButton.setVisible(true);
            moveDownRouteBuildingButton.setVisible(true);
            saveRouteBuildingButton.setVisible(true);
            editRouteBuildingButton.setVisible(false);            
        }
    }
    
    public JPanel getMainPanel() {
        return mainPanel;
    }
    
    public void buttonActionListeners(ActionListener al) {
		moveUpRouteBuildingButton.setActionCommand(ActionKey.ROUTE_BUILDING_MOVE_UP);
        moveUpRouteBuildingButton.addActionListener(al);
		moveDownRouteBuildingButton.setActionCommand(ActionKey.ROUTE_BUILDING_MOVE_DOWN);
        moveDownRouteBuildingButton.addActionListener(al);        
		editRouteBuildingButton.setActionCommand(ActionKey.ROUTE_BUILDING_EDIT);
        editRouteBuildingButton.addActionListener(al);        
		saveRouteBuildingButton.setActionCommand(ActionKey.ROUTE_BUILDING_SAVE);
        saveRouteBuildingButton.addActionListener(al);                
		newRouteBuildingButton.setActionCommand(ActionKey.ROUTE_BUILDING_CREATE);
        newRouteBuildingButton.addActionListener(al);
		deleteRouteBuildingButton.setActionCommand(ActionKey.ROUTE_BUILDING_DELETE);
        deleteRouteBuildingButton.addActionListener(al);      
    }
    
    public void tableKeyListeners(KeyListener kl) {
        routeBuildingTable.addKeyListener(kl);
    }
    
    public void tableMouseListeners(MouseListener ml) {
        routeBuildingTable.addMouseListener(ml);
    }
    
}
