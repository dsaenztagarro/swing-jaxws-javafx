/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BuildingListDialog.java
 *
 * Created on 25-sep-2011, 14:11:52
 */

package hidrocon.ui.route.dialog;

import hidrocon.HidroconView;
import hidrocon.core.database.routebuilding.manager.RouteBuildingManager;
import hidrocon.custom.button.toolbar.HidroExitButton;
import hidrocon.custom.button.toolbar.HidroSelectButton;
import hidrocon.custom.dialog.HidroDialog;
import hidrocon.core.database.building.entities.Building;
import hidrocon.custom.dialog.interfaces.ISelector;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.ListSelectionModel;

/**
 *
 * @author david
 */
public final class BuildingSelectionDialog extends HidroDialog implements ISelector {

	private List listSelection;

    /** Creates new form BuildingListDialog */
    public BuildingSelectionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initTopPanel();
        // Allow multiple selections of rows, visible columns, or cell blocks (default)
        buildingTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

	/*
	 * HidroDialog abstract methods implementation - BEGIN
	 */    
	protected void initTopPanel() {
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
		topPanel.setTitle("  " + resourceMap.getString("buildingselection.toppanel.title"));

        HidroSelectButton selectButton = new HidroSelectButton();
        HidroExitButton exitButton = new HidroExitButton();
        
 		selectButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
                selectBuilding();
			}
		});
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				close();
			}
		});

        selectButton.setToolTipText(resourceMap.getString("buildingselection.toolbar.selectbutton.tooltip"));
        exitButton.setToolTipText(resourceMap.getString("buildingselection.toolbar.exitbutton.tooltip"));

        topPanel.addButton(selectButton);
        topPanel.addButton(exitButton);
	}
    

	/*
	 * HidroDialog abstract methods implementation - END
	 */
    
    private void selectBuilding() {
        listSelection = new java.util.ArrayList();
        int[] rowIndex = buildingTable.getSelectedRows();
        for (int i=0; i<rowIndex.length; i++) {
            Building building = buildingList.get(buildingTable.convertRowIndexToModel(rowIndex[i]));
            listSelection.add(building);
            //System.out.println("building[" + i + "] = " + building.getInicial());
        }
        if (!listSelection.isEmpty()) {
            close();
        }
    }
    
    private void close() {
        setVisible(false);
    }
    
    public boolean isSelection() {
        return listSelection!=null && !listSelection.isEmpty();
    }
    
    public List getSelection() {
        return listSelection;
    }
    
	public void reload() {
        listSelection = null;
        RouteBuildingManager rbm = new RouteBuildingManager();
		//Refresh table
		java.util.List<Building> oldRecord = this.getBuildingList();
		setBuildingList((List<Building>) org.jdesktop.observablecollections.ObservableCollections.observableList(rbm.getBuildingAvailableList()));
		propertyChangeSupport.firePropertyChange("buildingList", oldRecord, getBuildingList());
	}
	
    /** This method is called from within the constructor to
     * initialize the form.<Building>
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        hidrocon.core.database.routebuilding.manager.RouteBuildingManager rbm = new hidrocon.core.database.routebuilding.manager.RouteBuildingManager();
        buildingList = org.jdesktop.observablecollections.ObservableCollections.observableList(rbm.getBuildingAvailableList());
        mainPanel = new hidrocon.custom.panel.HidroPanel();
        buildingScrollPane = new javax.swing.JScrollPane();
        buildingTable = new hidrocon.custom.table.HidroTable();
        hidroPanel1 = new hidrocon.custom.panel.HidroPanel();
        leftFiller = new javax.swing.Box.Filler(new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 0), new java.awt.Dimension(24, 32767));
        rightFiller = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        bottomFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25), new java.awt.Dimension(32767, 25));
        topPanel = new hidrocon.custom.panel.HidroTopPanel();

        setBounds(new java.awt.Rectangle(0, 0, 400, 300));
        setMinimumSize(new java.awt.Dimension(400, 300));
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        buildingScrollPane.setName("buildingScrollPane"); // NOI18N

        buildingTable.setName("buildingTable"); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${buildingList}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, buildingTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingCode}"));
        columnBinding.setColumnName("Building Code");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${address}"));
        columnBinding.setColumnName("Address");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingNumber}"));
        columnBinding.setColumnName("Building Number");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        buildingTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                processKeyPressed(evt);
            }
        });
        buildingScrollPane.setViewportView(buildingTable);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(BuildingSelectionDialog.class);
        buildingTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        buildingTable.getColumnModel().getColumn(0).setMinWidth(80);
        buildingTable.getColumnModel().getColumn(0).setMaxWidth(80);
        buildingTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("buildingTable.columnModel.title0")); // NOI18N
        buildingTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("buildingTable.columnModel.title1")); // NOI18N
        buildingTable.getColumnModel().getColumn(2).setMinWidth(80);
        buildingTable.getColumnModel().getColumn(2).setMaxWidth(80);
        buildingTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("buildingTable.columnModel.title2")); // NOI18N

        mainPanel.add(buildingScrollPane, java.awt.BorderLayout.CENTER);

        hidroPanel1.setName("hidroPanel1"); // NOI18N
        hidroPanel1.setPreferredSize(new java.awt.Dimension(568, 25));

        javax.swing.GroupLayout hidroPanel1Layout = new javax.swing.GroupLayout(hidroPanel1);
        hidroPanel1.setLayout(hidroPanel1Layout);
        hidroPanel1Layout.setHorizontalGroup(
            hidroPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        hidroPanel1Layout.setVerticalGroup(
            hidroPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        mainPanel.add(hidroPanel1, java.awt.BorderLayout.PAGE_START);

        leftFiller.setName("leftFiller"); // NOI18N
        mainPanel.add(leftFiller, java.awt.BorderLayout.LINE_START);

        rightFiller.setName("rightFiller"); // NOI18N
        mainPanel.add(rightFiller, java.awt.BorderLayout.LINE_END);

        bottomFiller.setName("bottomFiller"); // NOI18N
        mainPanel.add(bottomFiller, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        topPanel.setName("topPanel"); // NOI18N
        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

	private void processKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_processKeyPressed
		int keyCode = evt.getKeyCode();
		if (keyCode == KeyEvent.VK_ENTER) {
			evt.consume();
		}
		else if (keyCode == KeyEvent.VK_ESCAPE) {
			this.closeDialog(null);
		}
	}//GEN-LAST:event_processKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler bottomFiller;
    private java.util.List<Building> buildingList;
    private javax.swing.JScrollPane buildingScrollPane;
    private hidrocon.custom.table.HidroTable buildingTable;
    private hidrocon.custom.panel.HidroPanel hidroPanel1;
    private javax.swing.Box.Filler leftFiller;
    private hidrocon.custom.panel.HidroPanel mainPanel;
    private javax.swing.Box.Filler rightFiller;
    private hidrocon.custom.panel.HidroTopPanel topPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables


	/**
	 * @return the buildingList
	 */ public java.util.List<Building> getBuildingList() {
		return buildingList;
	}

	/**
	 * @param buildingList the buildingList to set
	 */ public void setBuildingList(java.util.List<Building> buildingList) {
		this.buildingList = buildingList;
	}

}
