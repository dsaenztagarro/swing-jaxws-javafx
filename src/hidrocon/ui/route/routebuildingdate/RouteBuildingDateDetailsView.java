/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RouteBuildingDateDetailsView.java
 *
 * Created on 25-nov-2011, 22:16:43
 */
package hidrocon.ui.route.routebuildingdate;

import hidrocon.HidroconView;
import hidrocon.core.database.routebuildingdate.entities.RouteBuildingDateView;
import hidrocon.core.database.routebuildingdate.manager.RouteBuildingDateManager;
import hidrocon.core.database.routedate.entities.RouteDate;
import hidrocon.core.utils.ActionKey;
import hidrocon.custom.Constant;
import hidrocon.custom.button.toolbar.HidroArrowDownButton;
import hidrocon.custom.button.toolbar.HidroArrowUpButton;
import hidrocon.custom.button.toolbar.HidroEditButton;
import hidrocon.custom.button.toolbar.HidroExitButton;
import hidrocon.custom.button.toolbar.HidroSaveButton;
import hidrocon.custom.dialog.interfaces.IEntityView;
import hidrocon.custom.panel.HidroMainPanel;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author David SÃ¡enz Tagarro
 */
public class RouteBuildingDateDetailsView extends HidroMainPanel implements IEntityView {
    
    private RouteDate routeDate;
    
    private int mode;
    
    private HidroEditButton editButton;
    private HidroSaveButton saveButton;
    private HidroArrowUpButton arrowUpButton;
    private HidroArrowDownButton arrowDownButton;
    private HidroExitButton exitButton;
    
    private boolean routeBuildingDateSaved = false;
    
    /** Creates new form RouteBuildingDateDetailsView */
    public RouteBuildingDateDetailsView() {
        initComponents();
        initPanel();
    }
    
	/*
	 * IPanelInitializer implementation - BEGIN
	 */    
    private void initPanel() {
        initTopPanel();
        customizeComponents();         
    }

	protected void initTopPanel() {
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(HidroconView.class);
		topPanel.setTitle("  " + resourceMap.getString("routebuildingdate.details.toppanel.title"));

        arrowUpButton = new HidroArrowUpButton();
        arrowDownButton = new HidroArrowDownButton();
        editButton = new HidroEditButton();
		saveButton = new HidroSaveButton();
        exitButton = new HidroExitButton();
        
        arrowUpButton.setToolTipText(resourceMap.getString("routebuildingdate.toolbar.arrowUpbutton.tooltip"));
        arrowDownButton.setToolTipText(resourceMap.getString("routebuildingdate.toolbar.arrowDownbutton.tooltip"));          
        editButton.setToolTipText(resourceMap.getString("routebuildingdate.toolbar.editbutton.tooltip"));
		saveButton.setToolTipText(resourceMap.getString("routebuildingdate.toolbar.savebutton.tooltip"));
        exitButton.setToolTipText(resourceMap.getString("routebuildingdate.toolbar.exitbutton.tooltip"));

        topPanel.addButton(arrowUpButton);
        topPanel.addButton(arrowDownButton);
        topPanel.addButton(editButton);
		topPanel.addButton(saveButton);
        topPanel.addButton(exitButton);
	}

    protected void customizeComponents() {
        routeBuildingDateTable.setRowSorter(null);
        routeBuildingDateTable.setAutoCreateRowSorter(false);        
        routeBuildingDateTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    editRouteBuildingDate();
                }
            }
        });  
    }    
    
    public int getRouteBuildingDateSelectedIndex() {
        if (routeBuildingDateTable.getSelectedRow()>-1) {
            return routeBuildingDateTable.convertRowIndexToModel(routeBuildingDateTable.getSelectedRow());
        }
        return -1;
    }
    
    public void selectRouteBuildingDateTableRow(int index) {
        routeBuildingDateTable.setRowSelectionInterval(index, index);
    }

    
    protected void editRouteBuildingDate() {
        setMode(Constant.VIEW_MODE_UPDATE);
    }
    
    protected void saveRouteBuildingDate() {
        RouteBuildingDateManager rbdm = new RouteBuildingDateManager();
        rbdm.updateRouteBuildingDate(routeDate.getId(),routeBuildingDateList);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        routeBuildingDateList = org.jdesktop.observablecollections.ObservableCollections.observableList(new ArrayList());
        topPanel = new hidrocon.custom.panel.HidroTopPanel();
        mainPanel = new hidrocon.custom.panel.HidroMainPanel();
        routeBuildingDateScrollPane = new javax.swing.JScrollPane();
        routeBuildingDateTable = new hidrocon.custom.table.HidroTable();
        leftFiller = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        rightFiller = new javax.swing.Box.Filler(new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 0), new java.awt.Dimension(25, 32767));
        bottomFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25), new java.awt.Dimension(32767, 25));
        topFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 25), new java.awt.Dimension(0, 25), new java.awt.Dimension(32767, 25));

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(650, 350));
        setLayout(new java.awt.BorderLayout());

        topPanel.setName("topPanel"); // NOI18N
        add(topPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.GridBagLayout());

        routeBuildingDateScrollPane.setName("routeBuildingDateScrollPane"); // NOI18N

        routeBuildingDateTable.setName("routeBuildingDateTable"); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${routeBuildingDateList}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, routeBuildingDateTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${orderId}"));
        columnBinding.setColumnName("Order Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingCode}"));
        columnBinding.setColumnName("Building Code");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingMeterCounter}"));
        columnBinding.setColumnName("Building Meter Counter");
        columnBinding.setColumnClass(java.math.BigInteger.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingRouteIsDefault}"));
        columnBinding.setColumnName("Building Route Is Default");
        columnBinding.setColumnClass(Character.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingAddress}"));
        columnBinding.setColumnName("Building Address");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${buildingNumber}"));
        columnBinding.setColumnName("Building Number");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        routeBuildingDateScrollPane.setViewportView(routeBuildingDateTable);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(hidrocon.HidroconApp.class).getContext().getResourceMap(RouteBuildingDateDetailsView.class);
        routeBuildingDateTable.getColumnModel().getColumn(0).setMinWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(0).setMaxWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title0")); // NOI18N
        routeBuildingDateTable.getColumnModel().getColumn(1).setMinWidth(100);
        routeBuildingDateTable.getColumnModel().getColumn(1).setMaxWidth(100);
        routeBuildingDateTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title1")); // NOI18N
        routeBuildingDateTable.getColumnModel().getColumn(2).setMinWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(2).setMaxWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title4")); // NOI18N
        routeBuildingDateTable.getColumnModel().getColumn(3).setMinWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(3).setMaxWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title5")); // NOI18N
        routeBuildingDateTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title2")); // NOI18N
        routeBuildingDateTable.getColumnModel().getColumn(5).setMinWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(5).setMaxWidth(80);
        routeBuildingDateTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("routeBuildingDateTable.columnModel.title3")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(routeBuildingDateScrollPane, gridBagConstraints);

        leftFiller.setName("leftFiller"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        mainPanel.add(leftFiller, gridBagConstraints);

        rightFiller.setName("rightFiller"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        mainPanel.add(rightFiller, gridBagConstraints);

        bottomFiller.setName("bottomFiller"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        mainPanel.add(bottomFiller, gridBagConstraints);

        topFiller.setName("topFiller"); // NOI18N
        mainPanel.add(topFiller, new java.awt.GridBagConstraints());

        add(mainPanel, java.awt.BorderLayout.CENTER);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler bottomFiller;
    private javax.swing.Box.Filler leftFiller;
    private hidrocon.custom.panel.HidroMainPanel mainPanel;
    private javax.swing.Box.Filler rightFiller;
    private java.util.List<RouteBuildingDateView> routeBuildingDateList;
    private javax.swing.JScrollPane routeBuildingDateScrollPane;
    private hidrocon.custom.table.HidroTable routeBuildingDateTable;
    private javax.swing.Box.Filler topFiller;
    private hidrocon.custom.panel.HidroTopPanel topPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    
    public void setMode(int mode) {
        this.mode = mode;
        if (this.mode == Constant.VIEW_MODE_CREATION) {
            setCreationMode();
        }
        else if (this.mode == Constant.VIEW_MODE_READONLY) {
            setViewMode();
        }   
        else if (this.mode == Constant.VIEW_MODE_UPDATE) {
            setUpdateMode();
        }        
        else if (this.mode == Constant.ENTITY_MANAGEMENT_MODE_SUMMARY) {
            setSummaryMode();
        }
    }

    public void setEntity(Object routeDate) {
        this.routeDate = (RouteDate)routeDate;
        
        routeBuildingDateList.clear();
        RouteBuildingDateManager rbdm = new RouteBuildingDateManager();
        List<RouteBuildingDateView> list = rbdm.getRouteBuildingDateList(this.routeDate.getId());
        routeBuildingDateList.addAll(list);
    }
    
    public Object getEntity() {
        return null; //this.administrator;
    }
    
    public boolean isEntityUpdated() {
        return routeBuildingDateSaved;
    }
    
    protected void setCreationMode() {
        showButtons();
        //enableAllFields(true);
        routeBuildingDateSaved = false;        
    }

    protected void setViewMode() {
        showButtons();
        //enableAllFields(false);
        //writeData();
        routeBuildingDateSaved = false;
    }

    protected void setUpdateMode() {
        showButtons();
        //enableAllFields(false);
        routeBuildingDateSaved = false;
    }
    
    protected void setSummaryMode() {
        showButtons();
        //enableAllFields(false);
        //writeData();
        routeBuildingDateSaved = false;
    }
    
    protected void showButtons() {
        if (mode == Constant.VIEW_MODE_CREATION) {
            //do nothing
        }
        else if (mode == Constant.ENTITY_MANAGEMENT_MODE_SUMMARY) {
            arrowUpButton.setVisible(false);
            arrowDownButton.setVisible(false);            
            editButton.setVisible(false);
            saveButton.setVisible(false);
        }
        if (mode == Constant.VIEW_MODE_READONLY) {
            arrowUpButton.setVisible(false);
            arrowDownButton.setVisible(false);
            saveButton.setVisible(false);
            editButton.setVisible(true);
        }
        else if (mode == Constant.VIEW_MODE_UPDATE) {
            arrowUpButton.setVisible(true);
            arrowDownButton.setVisible(true);
            saveButton.setVisible(true);
            editButton.setVisible(false);
        }           
    }
    
    public JPanel getMainPanel() {
        return mainPanel;
    }
    
	protected PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);

    @Override
	public void addPropertyChangeListener(PropertyChangeListener l) {
		propertyChangeSupport.addPropertyChangeListener(l);
	}

    @Override
	public void removePropertyChangeListener(PropertyChangeListener l) {
		propertyChangeSupport.removePropertyChangeListener(l);
	}    
    
    /**
     * @return the routeBuildingDateList
     */
    public java.util.List<RouteBuildingDateView> getRouteBuildingDateList() {
        return routeBuildingDateList;
    }

    /**
     * @param routeBuildingDateList the routeBuildingDateList to set
     */
    public void setRouteBuildingDateList(java.util.List<RouteBuildingDateView> routeBuildingDateList) {
        java.util.List<RouteBuildingDateView> oldRecord = this.routeBuildingDateList;
        this.routeBuildingDateList = routeBuildingDateList;
        propertyChangeSupport.firePropertyChange("routeBuildingDateList", oldRecord, routeBuildingDateList);     
    }
    
    public void buttonActionListeners(ActionListener al) {
        arrowUpButton.setActionCommand(ActionKey.ROUTE_BUILDING_DATE_MOVE_UP);
		arrowUpButton.addActionListener(al);
        arrowDownButton.setActionCommand(ActionKey.ROUTE_BUILDING_DATE_MOVE_DOWN);
		arrowDownButton.addActionListener(al);
        editButton.setActionCommand(ActionKey.ROUTE_BUILDING_DATE_EDIT);
		editButton.addActionListener(al);
        saveButton.setActionCommand(ActionKey.ROUTE_BUILDING_DATE_SAVE);
		saveButton.addActionListener(al);
        exitButton.setActionCommand(ActionKey.ROUTE_BUILDING_DATE_CLOSE);
		exitButton.addActionListener(al);
    }
    
    public void tableKeyListeners(KeyListener kl) {
        routeBuildingDateTable.addKeyListener(kl);
    }
    
    public void tableMouseListeners(MouseListener ml) {
        routeBuildingDateTable.addMouseListener(ml);
    }    
    
    
}
